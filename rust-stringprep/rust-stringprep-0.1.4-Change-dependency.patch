--- stringprep-0.1.4/Cargo.toml	1970-01-01T00:00:01+00:00
+++ stringprep-0.1.4/Cargo.toml	2024-05-09T08:52:15.900958+00:00
@@ -19,11 +19,11 @@
 license = "MIT/Apache-2.0"
 repository = "https://github.com/sfackler/rust-stringprep"

-[dependencies.finl_unicode]
-version = "1.2.0"
-
 [dependencies.unicode-bidi]
 version = "0.3"

 [dependencies.unicode-normalization]
 version = "0.1"
+
+[dependencies.unicode-properties]
+version = "0.1.1"

--- stringprep-0.1.4/src/tables.rs	1970-01-01T00:00:01+00:00
+++ stringprep-0.1.4/src/tables.rs	2024-05-09T08:52:15.900958+00:00
@@ -1,8 +1,8 @@
 //! Character Tables
-use finl_unicode::categories::CharacterCategories;
 use std::cmp::Ordering;
 use std::str::Chars;
 use unicode_bidi::{bidi_class, BidiClass};
+use unicode_properties::{GeneralCategoryGroup, UnicodeGeneralCategory};

 use super::rfc3454;

@@ -246,6 +246,6 @@
 pub fn x520_mapped_to_space(c: char) -> bool {
     match c {
         '\u{09}' | '\u{0A}'..='\u{0D}' | '\u{85}' => true,
-        _ => c.is_separator(),
+        _ => c.general_category_group() == GeneralCategoryGroup::Separator,
     }
 }

--- stringprep-0.1.4/src/lib.rs	1970-01-01T00:00:01+00:00
+++ stringprep-0.1.4/src/lib.rs	2024-05-09T08:52:15.900958+00:00
@@ -3,14 +3,14 @@
 //! [RFC 3454]: https://tools.ietf.org/html/rfc3454
 #![doc(html_root_url = "https://docs.rs/stringprep/0.1.2")]
 #![warn(missing_docs)]
-extern crate finl_unicode;
 extern crate unicode_bidi;
 extern crate unicode_normalization;
+extern crate unicode_properties;

-use finl_unicode::categories::CharacterCategories;
 use std::borrow::Cow;
 use std::fmt;
 use unicode_normalization::UnicodeNormalization;
+use unicode_properties::{GeneralCategoryGroup, UnicodeGeneralCategory};

 mod rfc3454;
 pub mod tables;
@@ -354,7 +354,7 @@
     // "The first code point of a string is prohibited from being a combining character."
     match s.chars().next() {
         Some(c) => {
-            if c.is_mark() {
+            if c.general_category_group() == GeneralCategoryGroup::Mark {
                 return Err(Error(ErrorCause::StartsWithCombiningCharacter));
             }
         }
